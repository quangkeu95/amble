name: Validate Release Version

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  extract-git-version:
    name: Extract the latest github tag version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Extract git tag version
        run: echo "GIT_REF=$(echo ${GITHUB_REF#refs/tags/})" >> $GITHUB_OUTPUT
      - name: Extract the git tag version
        run: |
          echo "VERSION=`echo $(git describe --always --tags --abbrev=0 | sed -n 's/v\([0-9][^;]*\).*/\1/p')`" >> $GITHUB_ENV
          echo "Exporting git ref version: $(git describe --always --tags --abbrev=0 | sed -n 's/v\([0-9][^;]*\).*/\1/p')"
        id: extract_git_version
    outputs:
      VERSION: ${{ steps.extract_git_version.outputs.VERSION }}

  extract-crate-package-version:
    name: Extract the crate package version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Print Crate Package Version
        run: cargo metadata --format-version=1 --no-deps | jq -r '.packages[0].version'
      - name: Export Crate Package Version
        run: |
          echo "PACKAGEV=$(cargo metadata --format-version=1 --no-deps | jq -r '.packages[0].version')" >> $GITHUB_OUTPUT
          echo "Exporting package version: $(cargo metadata --format-version=1 --no-deps | jq -r '.packages[0].version')"
        id: export_crate_package_version
    outputs:
      PACKAGEV: ${{ steps.export_crate_package_version.outputs.PACKAGEV }}

  validate-crate-package-version:
    name: Validates that the crate package version is greater than the github tag version
    runs-on: ubuntu-latest
    needs: [extract-git-version, extract-crate-package-version]
    env:
      VERSION: ${{ needs.extract-git-version.outputs.VERSION }}
      PACKAGEV: ${{ needs.extract-crate-package-version.outputs.PACKAGEV }}
    steps:
      - name: Print Git Tag Semver
        run: echo ${{ env.VERSION }}
      - name: Print Crate Semver
        run: echo ${{ env.PACKAGEV }}
      - name: Validate semvers
        run: |
          cargo install semver-util
          semver cmp ${{ env.PACKAGEV }} lte ${{ env.VERSION }} && exit 1

